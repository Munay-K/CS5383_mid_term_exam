name: SonarCloud

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # necesario para análisis correcto

      # ---- gcovr rápido por pip + cache ----
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-gcovr
          restore-keys: pip-${{ runner.os }}-

      - name: Install gcovr
        run: pip install gcovr

      # (Opcional) cachea dependencias de CMake FetchContent (p.ej., Catch2)
      - name: Cache CMake deps
        uses: actions/cache@v4
        with:
          path: build/_deps
          key: cmake-deps-${{ hashFiles('CMakeLists.txt', 'include/**', 'src/**', 'tests/**') }}

      - name: Clean build
        run: rm -rf build

      - name: Configure (Debug + compile_commands.json)
        run: |
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Build
        run: cmake --build build -j2

      - name: Run tests
        run: ./build/tests

      - name: Generate coverage (gcovr → SonarQube XML)
        run: |
          gcovr \
            --root . \
            --object-directory build \
            --filter '^(./)?(src|include)/' \
            --exclude 'tests' \
            --exclude 'build/_deps' \
            --sonarqube coverage.xml

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN:  ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
